/* NutriTracker Pro - Optimized JavaScript */
/* Version: 1.0.0 - Compressed for production */
class NutriTrackerApp{constructor(){this.currentPage='home';this.currentLanguage=localStorage.getItem('nutritracker_language')||'en';this.isOnline=navigator.onLine;this.apiBaseUrl='/api';this.cache=new Map();this.pagination={currentPage:1,itemsPerPage:20,totalItems:0,totalPages:0};this.init()}init(){this.setupEventListeners();this.setupLanguage();this.setupOfflineDetection();this.setupPWAFeatures();this.loadPage('home');this.preloadCriticalData()}setupEventListeners(){document.addEventListener('click',e=>{if(e.target.matches('[data-page]')){e.preventDefault();this.loadPage(e.target.dataset.page)}if(e.target.matches('[data-lang]')){e.preventDefault();this.changeLanguage(e.target.dataset.lang)}});document.getElementById('nutrition-form')?.addEventListener('submit',e=>{e.preventDefault();this.calculateDiet(new FormData(e.target))});document.getElementById('logout-btn')?.addEventListener('click',()=>{this.logout()});window.addEventListener('online',()=>{this.setOnlineStatus(true)});window.addEventListener('offline',()=>{this.setOnlineStatus(false)});document.addEventListener('keydown',e=>{if(e.ctrlKey&&e.key==='k'){e.preventDefault();this.openSearch()}})}setupLanguage(){document.documentElement.setAttribute('lang',this.currentLanguage);document.documentElement.setAttribute('dir',this.currentLanguage==='ar'?'rtl':'ltr');this.updateLanguageDisplay()}setupOfflineDetection(){this.setOnlineStatus(this.isOnline)}setupPWAFeatures(){if('serviceWorker'in navigator){this.setupServiceWorker()}this.setupInstallPrompt()}async setupServiceWorker(){try{const registration=await navigator.serviceWorker.register('/sw.js');console.log('SW registered:',registration)}catch(error){console.error('SW registration failed:',error)}}setupInstallPrompt(){let deferredPrompt;window.addEventListener('beforeinstallprompt',e=>{e.preventDefault();deferredPrompt=e;document.getElementById('install-banner')?.classList.remove('d-none')});document.getElementById('install-btn')?.addEventListener('click',async()=>{if(deferredPrompt){deferredPrompt.prompt();const{outcome}=await deferredPrompt.userChoice;console.log(`Install prompt result: ${outcome}`);deferredPrompt=null;document.getElementById('install-banner')?.classList.add('d-none')}})}async loadPage(pageId){if(this.currentPage===pageId)return;document.querySelectorAll('.page-content').forEach(page=>{page.classList.add('d-none')});const targetPage=document.getElementById(`page-${pageId}`);if(targetPage){targetPage.classList.remove('d-none');this.currentPage=pageId;this.updateActiveNavLink(pageId);await this.loadPageContent(pageId);history.pushState({page:pageId},``,`#${pageId}`)}else{console.error(`Page ${pageId} not found`)}}updateActiveNavLink(pageId){document.querySelectorAll('.nav-link[data-page]').forEach(link=>{link.classList.remove('active')});const activeLink=document.querySelector(`[data-page="${pageId}"]`);activeLink?.classList.add('active')}async loadPageContent(pageId){const loadingSpinner=`<div class="text-center py-5"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>`;switch(pageId){case 'nutrition':await this.loadNutritionData();break;case 'workout':await this.loadWorkoutData();break;case 'diseases':await this.loadDiseasesData();break;case 'injuries':await this.loadInjuriesData();break;case 'profile':await this.loadProfileData();break;case 'settings':await this.loadSettingsData();break}}async calculateDiet(formData){const data={age:parseInt(formData.get('age')),gender:formData.get('gender'),weight:parseFloat(formData.get('weight')),height:parseInt(formData.get('height')),activityLevel:formData.get('activityLevel'),goal:formData.get('goal'),dietaryRestrictions:['halal','no_alcohol','no_pork']};try{const response=await this.apiCall('/calculate-diet',{method:'POST',body:JSON.stringify(data)});if(response.success){this.displayNutritionResults(response.data)}else{this.showAlert('Error calculating diet plan: '+response.error,'danger')}}catch(error){this.showAlert('Failed to calculate diet plan. Using offline data.','warning');this.displayOfflineNutritionResults(data)}}displayNutritionResults(data){const resultsContainer=document.getElementById('nutrition-results-content');const bmr=data.bmr||this.calculateBMR(data);const calories=data.dailyCalories||this.calculateCalories(bmr,data.activityLevel,data.goal);resultsContainer.innerHTML=`<div class="row g-4"><div class="col-md-6"><div class="card bg-primary text-white"><div class="card-body text-center"><h3>${calories}</h3><p class="mb-0">Daily Calories</p></div></div></div><div class="col-md-6"><div class="card bg-success text-white"><div class="card-body text-center"><h3>${bmr}</h3><p class="mb-0">Base Metabolic Rate</p></div></div></div></div><div class="mt-4"><h5>üìã Recommended Meal Plan</h5><div class="list-group">${this.generateMealPlan(calories).map(meal=>`<div class="list-group-item"><strong>${meal.name}</strong> - ${meal.calories} cal<br><small class="text-muted">${meal.description}</small></div>`).join('')}</div></div><div class="mt-4"><h5>üíä Supplements</h5><div class="row g-3">${this.getSupplementRecommendations(data).map(supp=>`<div class="col-md-6"><div class="card border-info"><div class="card-body"><h6>${supp.name}</h6><p class="small mb-0">${supp.benefit}</p></div></div></div>`).join('')}</div></div>`;document.getElementById('nutrition-results').classList.remove('d-none')}calculateBMR(data){const{age,gender,weight,height}=data;if(gender==='male'){return Math.round(88.362+(13.397*weight)+(4.799*height)-(5.677*age))}else{return Math.round(447.593+(9.247*weight)+(3.098*height)-(4.330*age))}}calculateCalories(bmr,activityLevel,goal){const multipliers={sedentary:1.2,light:1.375,moderate:1.55,active:1.725,extra:1.9};const maintenance=bmr*multipliers[activityLevel];switch(goal){case 'lose':return Math.round(maintenance-500);case 'gain':return Math.round(maintenance+500);default:return Math.round(maintenance)}}generateMealPlan(totalCalories){const meals=[{name:'üåÖ Breakfast',calories:Math.round(totalCalories*0.25),description:'Whole grain oats with dates, almonds, and honey'},{name:'ü•ó Lunch',calories:Math.round(totalCalories*0.35),description:'Grilled chicken with quinoa and roasted vegetables'},{name:'üçΩÔ∏è Dinner',calories:Math.round(totalCalories*0.30),description:'Baked fish with brown rice and steamed broccoli'},{name:'ü•ú Snacks',calories:Math.round(totalCalories*0.10),description:'Mixed nuts, fruits, and herbal tea'}];return meals}getSupplementRecommendations(data){return[{name:'Omega-3',benefit:'Supports heart and brain health'},{name:'Vitamin D3',benefit:'Essential for bone health and immunity'},{name:'Magnesium',benefit:'Supports muscle function and sleep'},{name:'Probiotics',benefit:'Promotes digestive health'}]}async loadDiseasesData(){const container=document.getElementById('page-diseases');try{const response=await this.apiCall('/diseases/list');if(response.success){this.displayDiseases(response.data)}else{this.displayOfflineDiseases()}}catch(error){this.displayOfflineDiseases()}}displayDiseases(diseases){const container=document.getElementById('page-diseases');container.innerHTML=`<div class="container my-4"><h2 class="mb-4">üè• Health Condition Guides</h2><div class="row g-4">${diseases.map(disease=>`<div class="col-md-6 col-lg-4"><div class="card h-100 card-hover"><div class="card-body"><h5 class="card-title">${disease.name}</h5><p class="card-text">${disease.description}</p><button class="btn btn-primary btn-sm" onclick="app.loadDiseaseDetails('${disease.id}')">View Guide</button></div></div></div>`).join('')}</div></div>`}async loadInjuriesData(){try{const response=await this.apiCall('/injuries/list');if(response.success){this.displayInjuries(response.data)}else{this.displayOfflineInjuries()}}catch(error){this.displayOfflineInjuries()}}displayInjuries(injuries){const container=document.getElementById('page-injuries');container.innerHTML=`<div class="container my-4"><h2 class="mb-4">ü©π Injury Rehabilitation</h2><div class="row g-4">${injuries.map(injury=>`<div class="col-md-6 col-lg-4"><div class="card h-100 card-hover"><div class="card-body"><h5 class="card-title">${injury.name}</h5><p class="card-text">${injury.description}</p><button class="btn btn-success btn-sm" onclick="app.loadInjuryDetails('${injury.id}')">View Plan</button></div></div></div>`).join('')}</div></div>`}async apiCall(endpoint,options={}){const url=this.apiBaseUrl+endpoint;const defaultOptions={method:'GET',headers:{'Content-Type':'application/json','Authorization':`Bearer ${this.getAuthToken()}`}};const finalOptions={...defaultOptions,...options};try{const response=await fetch(url,finalOptions);const data=await response.json();if(!response.ok){throw new Error(data.error||'API request failed')}this.cache.set(url,{data,timestamp:Date.now()});return data}catch(error){console.error('API call failed:',error);const cached=this.cache.get(url);if(cached&&Date.now()-cached.timestamp<300000){return cached.data}throw error}}getAuthToken(){return localStorage.getItem('nutritracker_token')||''}setOnlineStatus(isOnline){this.isOnline=isOnline;const statusElement=document.getElementById('online-status');const offlineToast=document.getElementById('offline-notification');if(isOnline){statusElement?.classList.remove('bg-danger');statusElement?.classList.add('bg-success');if(statusElement)statusElement.textContent='üü¢ Online'}else{statusElement?.classList.remove('bg-success');statusElement?.classList.add('bg-danger');if(statusElement)statusElement.textContent='üî¥ Offline';if(offlineToast){const toast=new bootstrap.Toast(offlineToast);toast.show()}}}changeLanguage(lang){this.currentLanguage=lang;localStorage.setItem('nutritracker_language',lang);document.documentElement.setAttribute('lang',lang);document.documentElement.setAttribute('dir',lang==='ar'?'rtl':'ltr');this.updateLanguageDisplay();this.loadTranslations(lang)}updateLanguageDisplay(){const currentLangElement=document.getElementById('current-language');if(currentLangElement){currentLangElement.textContent=this.currentLanguage==='ar'?'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©':'English'}}async loadTranslations(lang){if(lang==='en')return;try{const response=await fetch(`/static/i18n/${lang}.json`);const translations=await response.json();this.applyTranslations(translations)}catch(error){console.error('Failed to load translations:',error)}}applyTranslations(translations){document.querySelectorAll('[data-i18n]').forEach(element=>{const key=element.dataset.i18n;if(translations[key]){element.textContent=translations[key]}})}showAlert(message,type='info'){const alertHtml=`<div class="alert alert-${type} alert-dismissible fade show" role="alert">${message}<button type="button" class="btn-close" data-bs-dismiss="alert"></button></div>`;const container=document.querySelector('.container');if(container){container.insertAdjacentHTML('afterbegin',alertHtml)}}async preloadCriticalData(){const criticalEndpoints=['/nutrition-info','/diseases/list','/injuries/list'];criticalEndpoints.forEach(async endpoint=>{try{await this.apiCall(endpoint)}catch(error){console.log(`Preload failed for ${endpoint}:`,error)}})}displayOfflineNutritionResults(data){this.showAlert('Showing offline calculation','info');const bmr=this.calculateBMR(data);const calories=this.calculateCalories(bmr,data.activityLevel,data.goal);this.displayNutritionResults({bmr,dailyCalories:calories,...data})}displayOfflineDiseases(){const offlineData=[{id:'diabetes',name:'Diabetes Management',description:'Nutrition guide for diabetes control'},{id:'hypertension',name:'High Blood Pressure',description:'Diet plan for blood pressure management'},{id:'obesity',name:'Weight Management',description:'Healthy weight loss strategies'}];this.displayDiseases(offlineData)}displayOfflineInjuries(){const offlineData=[{id:'knee',name:'Knee Injury',description:'Rehabilitation exercises for knee recovery'},{id:'shoulder',name:'Shoulder Injury',description:'Recovery plan for shoulder injuries'},{id:'back',name:'Back Pain',description:'Exercises for back pain relief'}];this.displayInjuries(offlineData)}logout(){localStorage.removeItem('nutritracker_token');localStorage.removeItem('nutritracker_user');window.location.reload()}openSearch(){console.log('Search functionality coming soon')}async loadWorkoutData(){const container=document.getElementById('page-workout');container.innerHTML=`<div class="container my-4"><h2 class="mb-4">üí™ Workout Planner</h2><div class="alert alert-info">Workout planning features are being loaded...</div></div>`}async loadProfileData(){const container=document.getElementById('page-profile');container.innerHTML=`<div class="container my-4"><h2 class="mb-4">üë§ Profile</h2><div class="alert alert-info">Profile features are being loaded...</div></div>`}async loadSettingsData(){const container=document.getElementById('page-settings');container.innerHTML=`<div class="container my-4"><h2 class="mb-4">‚öôÔ∏è Settings</h2><div class="alert alert-info">Settings panel is being loaded...</div></div>`}}const app=new NutriTrackerApp();window.addEventListener('popstate',e=>{if(e.state?.page){app.loadPage(e.state.page)}});document.addEventListener('DOMContentLoaded',()=>{const hash=window.location.hash.substring(1);if(hash){app.loadPage(hash)}});if('serviceWorker'in navigator){navigator.serviceWorker.addEventListener('message',event=>{if(event.data?.type==='CACHE_UPDATED'){app.showAlert('App updated! Refresh to see changes.','success')}})}const debounce=(func,wait)=>{let timeout;return function executedFunction(...args){const later=()=>{clearTimeout(timeout);func(...args)};clearTimeout(timeout);timeout=setTimeout(later,wait)}};const throttle=(func,limit)=>{let inThrottle;return function(){const args=arguments;const context=this;if(!inThrottle){func.apply(context,args);inThrottle=true;setTimeout(()=>inThrottle=false,limit)}}};window.addEventListener('resize',debounce(()=>{console.log('Window resized - responsive adjustments')},250));document.addEventListener('visibilitychange',()=>{if(document.hidden){console.log('App hidden - pausing non-critical operations')}else{console.log('App visible - resuming operations')}});if('connection'in navigator){navigator.connection.addEventListener('change',()=>{console.log('Network conditions changed:',navigator.connection.effectiveType)})}console.log('üöÄ NutriTracker Pro initialized successfully');
